// File: sdcnt.v
// Generated by MyHDL 0.10
// Date: Fri Oct  5 03:31:27 2018


`timescale 1ns/10ps

module sdcnt (
    master_clk_i,
    sdram_clk_o,
    sdram_clk_i,
    pb_i,
    SdramCntl0_0_sd_intf_cke,
    SdramCntl0_0_sd_intf_we,
    SdramCntl0_0_sd_intf_addr,
    SdramCntl0_0_sd_intf_dqml,
    SdramCntl0_0_sd_intf_cas,
    SdramCntl0_0_sd_intf_dqmh,
    SdramCntl0_0_sd_intf_ras,
    SdramCntl0_0_sd_intf_bs,
    SdramCntl0_0_sd_intf_cs,
    SdramCntl0_0_sd_intf_dq,
    SdramCntl0_0_host_intf_wr_i,
    SdramCntl0_0_host_intf_done_o,
    SdramCntl0_0_host_intf_rdPending_o,
    host_intf_inst_rst_i,
    SdramCntl0_0_host_intf_data_i,
    SdramCntl0_0_host_intf_data_o,
    SdramCntl0_0_host_intf_rd_i,
    SdramCntl0_0_host_intf_addr_i
);


input master_clk_i;
output sdram_clk_o;
wire sdram_clk_o;
input sdram_clk_i;
input pb_i;
output SdramCntl0_0_sd_intf_cke;
reg SdramCntl0_0_sd_intf_cke;
output SdramCntl0_0_sd_intf_we;
reg SdramCntl0_0_sd_intf_we;
output [12:0] SdramCntl0_0_sd_intf_addr;
reg [12:0] SdramCntl0_0_sd_intf_addr;
output SdramCntl0_0_sd_intf_dqml;
reg SdramCntl0_0_sd_intf_dqml;
output SdramCntl0_0_sd_intf_cas;
reg SdramCntl0_0_sd_intf_cas;
output SdramCntl0_0_sd_intf_dqmh;
reg SdramCntl0_0_sd_intf_dqmh;
output SdramCntl0_0_sd_intf_ras;
reg SdramCntl0_0_sd_intf_ras;
output [1:0] SdramCntl0_0_sd_intf_bs;
reg [1:0] SdramCntl0_0_sd_intf_bs;
output SdramCntl0_0_sd_intf_cs;
reg SdramCntl0_0_sd_intf_cs;
inout [15:0] SdramCntl0_0_sd_intf_dq;
wire [15:0] SdramCntl0_0_sd_intf_dq;
input SdramCntl0_0_host_intf_wr_i;
output SdramCntl0_0_host_intf_done_o;
wire SdramCntl0_0_host_intf_done_o;
output SdramCntl0_0_host_intf_rdPending_o;
wire SdramCntl0_0_host_intf_rdPending_o;
input host_intf_inst_rst_i;
input [15:0] SdramCntl0_0_host_intf_data_i;
output [15:0] SdramCntl0_0_host_intf_data_o;
wire [15:0] SdramCntl0_0_host_intf_data_o;
input SdramCntl0_0_host_intf_rd_i;
input [23:0] SdramCntl0_0_host_intf_addr_i;

wire reset;
reg [5:0] debounce_cntr;
reg pb_prev;
wire clk;
reg pb_debounced;
reg initialized;
reg [2:0] SdramCntl0_0_cmd_r;
reg [12:0] SdramCntl0_0_sAddr_x;
reg [2:0] SdramCntl0_0_cmd_x;
reg [1:0] SdramCntl0_0_activeBank_r;
reg [12:0] SdramCntl0_0_sAddr_r;
reg [15:0] SdramCntl0_0_sdramData_x;
reg SdramCntl0_0_activateInProgress_s;
reg SdramCntl0_0_sDataDir_x;
reg SdramCntl0_0_sDataDir_r;
wire [1:0] SdramCntl0_0_ba_x;
reg [4:0] SdramCntl0_0_rdPipeline_r;
wire [12:0] SdramCntl0_0_row_s;
reg [13:0] SdramCntl0_0_rfshCntr_x;
reg [1:0] SdramCntl0_0_ba_r;
reg [4:0] SdramCntl0_0_rdPipeline_x;
reg [13:0] SdramCntl0_0_rfshCntr_r;
reg [15:0] SdramCntl0_0_sDriver;
reg [1:0] SdramCntl0_0_activeBank_x;
reg SdramCntl0_0_doActivate_s;
wire [1:0] SdramCntl0_0_bank_s;
reg [8:0] SdramCntl0_0_refTimer_r;
reg SdramCntl0_0_rdInProgress_s;
reg [8:0] SdramCntl0_0_refTimer_x;
reg SdramCntl0_0_writeInProgress_s;
reg [2:0] SdramCntl0_0_state_x;
reg [15:0] SdramCntl0_0_sData_r;
wire [8:0] SdramCntl0_0_col_s;
reg [2:0] SdramCntl0_0_state_r;
wire [15:0] SdramCntl0_0_sData_x;
reg [9:0] SdramCntl0_0_timer_x;
reg [4:0] SdramCntl0_0_wrPipeline_x;
reg [1:0] SdramCntl0_0_wrTimer_x;
reg [4:0] SdramCntl0_0_wrPipeline_r;
reg [15:0] SdramCntl0_0_sdramData_r;
reg [1:0] SdramCntl0_0_wrTimer_r;
reg [9:0] SdramCntl0_0_timer_r;
reg [1:0] SdramCntl0_0_rasTimer_x;
reg [1:0] SdramCntl0_0_rasTimer_r;
reg [12:0] SdramCntl0_0_activeRow_x [0:4-1];
reg [12:0] SdramCntl0_0_activeRow_r [0:4-1];
reg SdramCntl0_0_activeFlag_x [0:4-1];
reg SdramCntl0_0_activeFlag_r [0:4-1];

assign SdramCntl0_0_sd_intf_dq = SdramCntl0_0_sDriver;


always @(posedge clk) begin: SDCNT_INTERNAL_RESET
    if ((initialized == 1'b0)) begin
        initialized <= (!initialized);
    end
end


always @(SdramCntl0_0_activeRow_r[0], SdramCntl0_0_activeRow_r[1], SdramCntl0_0_activeRow_r[2], SdramCntl0_0_activeRow_r[3], SdramCntl0_0_row_s, SdramCntl0_0_sAddr_r, SdramCntl0_0_activateInProgress_s, SdramCntl0_0_activeBank_r, SdramCntl0_0_sDataDir_r, SdramCntl0_0_ba_x, SdramCntl0_0_rdPipeline_r, SdramCntl0_0_ba_r, SdramCntl0_0_rfshCntr_r, SdramCntl0_0_host_intf_wr_i, SdramCntl0_0_doActivate_s, SdramCntl0_0_bank_s, SdramCntl0_0_refTimer_r, SdramCntl0_0_rdInProgress_s, SdramCntl0_0_writeInProgress_s, SdramCntl0_0_col_s, SdramCntl0_0_state_r, SdramCntl0_0_wrTimer_r, SdramCntl0_0_timer_r, SdramCntl0_0_host_intf_rd_i, SdramCntl0_0_rasTimer_r, SdramCntl0_0_activeFlag_r[0], SdramCntl0_0_activeFlag_r[1], SdramCntl0_0_activeFlag_r[2], SdramCntl0_0_activeFlag_r[3]) begin: SDCNT_SDRAMCNTL0_0_COMB_FUNC
    integer index;
    SdramCntl0_0_rdPipeline_x = {1'b0, SdramCntl0_0_rdPipeline_r[(3 + 2)-1:1]};
    SdramCntl0_0_wrPipeline_x = 5'h0;
    if ((SdramCntl0_0_rasTimer_r != 0)) begin
        SdramCntl0_0_rasTimer_x = (SdramCntl0_0_rasTimer_r - 1);
    end
    else begin
        SdramCntl0_0_rasTimer_x = SdramCntl0_0_rasTimer_r;
    end
    if ((SdramCntl0_0_wrTimer_r != 0)) begin
        SdramCntl0_0_wrTimer_x = (SdramCntl0_0_wrTimer_r - 1);
    end
    else begin
        SdramCntl0_0_wrTimer_x = SdramCntl0_0_wrTimer_r;
    end
    if ((SdramCntl0_0_refTimer_r != 0)) begin
        SdramCntl0_0_refTimer_x = (SdramCntl0_0_refTimer_r - 1);
        SdramCntl0_0_rfshCntr_x = SdramCntl0_0_rfshCntr_r;
    end
    else begin
        SdramCntl0_0_refTimer_x = 391;
        SdramCntl0_0_rfshCntr_x = (SdramCntl0_0_rfshCntr_r + 1);
    end
    SdramCntl0_0_cmd_x = 7;
    SdramCntl0_0_state_x = SdramCntl0_0_state_r;
    SdramCntl0_0_sAddr_x = SdramCntl0_0_sAddr_r;
    SdramCntl0_0_activeBank_x = SdramCntl0_0_activeBank_r;
    SdramCntl0_0_sDataDir_x = SdramCntl0_0_sDataDir_r;
    for (index=0; index<(2 ** 2); index=index+1) begin
        SdramCntl0_0_activeFlag_x[index] = SdramCntl0_0_activeFlag_r[index];
        SdramCntl0_0_activeRow_x[index] = SdramCntl0_0_activeRow_r[index];
    end
    if ((SdramCntl0_0_timer_r != 0)) begin
        SdramCntl0_0_timer_x = (SdramCntl0_0_timer_r - 1);
        SdramCntl0_0_cmd_x = 7;
    end
    else begin
        SdramCntl0_0_timer_x = SdramCntl0_0_timer_r;
        case (SdramCntl0_0_state_r)
            3'b000: begin
                SdramCntl0_0_timer_x = 1000;
                SdramCntl0_0_state_x = 3'b001;
            end
            3'b001: begin
                SdramCntl0_0_cmd_x = 2;
                SdramCntl0_0_timer_x = 1;
                SdramCntl0_0_state_x = 3'b011;
                SdramCntl0_0_sAddr_x = 512;
                SdramCntl0_0_rfshCntr_x = 8;
            end
            3'b011: begin
                SdramCntl0_0_cmd_x = 1;
                SdramCntl0_0_timer_x = 4;
                SdramCntl0_0_rfshCntr_x = (SdramCntl0_0_rfshCntr_r - 1);
                if ((SdramCntl0_0_rfshCntr_r == 1)) begin
                    SdramCntl0_0_state_x = 3'b010;
                end
            end
            3'b010: begin
                SdramCntl0_0_cmd_x = 0;
                SdramCntl0_0_timer_x = 2;
                SdramCntl0_0_state_x = 3'b100;
                SdramCntl0_0_sAddr_x = 48;
            end
            3'b100: begin
                if ((SdramCntl0_0_rfshCntr_r != 0)) begin
                    if (((SdramCntl0_0_activateInProgress_s == 1'b0) && (SdramCntl0_0_writeInProgress_s == 1'b0) && (SdramCntl0_0_rdInProgress_s == 1'b0))) begin
                        SdramCntl0_0_cmd_x = 2;
                        SdramCntl0_0_timer_x = 1;
                        SdramCntl0_0_state_x = 3'b110;
                        SdramCntl0_0_sAddr_x = 512;
                        for (index=0; index<(2 ** 2); index=index+1) begin
                            SdramCntl0_0_activeFlag_x[index] = 1'b0;
                        end
                    end
                end
                else if ((SdramCntl0_0_host_intf_rd_i == 1'b1)) begin
                    if ((SdramCntl0_0_ba_x == SdramCntl0_0_ba_r)) begin
                        if ((SdramCntl0_0_doActivate_s == 1'b1)) begin
                            if (((SdramCntl0_0_activateInProgress_s == 1'b0) && (SdramCntl0_0_writeInProgress_s == 1'b0) && (SdramCntl0_0_rdInProgress_s == 1'b0))) begin
                                SdramCntl0_0_cmd_x = 2;
                                SdramCntl0_0_timer_x = 1;
                                SdramCntl0_0_state_x = 3'b101;
                                SdramCntl0_0_sAddr_x = 0;
                                SdramCntl0_0_activeFlag_x[SdramCntl0_0_bank_s] = 1'b0;
                            end
                        end
                        else if ((SdramCntl0_0_rdInProgress_s == 1'b0)) begin
                            SdramCntl0_0_cmd_x = 5;
                            SdramCntl0_0_sDataDir_x = 1'b0;
                            SdramCntl0_0_sAddr_x = SdramCntl0_0_col_s;
                            SdramCntl0_0_rdPipeline_x = {1'b1, SdramCntl0_0_rdPipeline_r[(3 + 2)-1:1]};
                        end
                    end
                end
                else if ((SdramCntl0_0_host_intf_wr_i == 1'b1)) begin
                    if ((SdramCntl0_0_ba_x == SdramCntl0_0_ba_r)) begin
                        if ((SdramCntl0_0_doActivate_s == 1'b1)) begin
                            if (((SdramCntl0_0_activateInProgress_s == 1'b0) && (SdramCntl0_0_writeInProgress_s == 1'b0) && (SdramCntl0_0_rdInProgress_s == 1'b0))) begin
                                SdramCntl0_0_cmd_x = 2;
                                SdramCntl0_0_timer_x = 1;
                                SdramCntl0_0_state_x = 3'b101;
                                SdramCntl0_0_sAddr_x = 0;
                                SdramCntl0_0_activeFlag_x[SdramCntl0_0_bank_s] = 1'b0;
                            end
                        end
                        else if ((SdramCntl0_0_rdInProgress_s == 1'b0)) begin
                            SdramCntl0_0_cmd_x = 4;
                            SdramCntl0_0_sDataDir_x = 1'b1;
                            SdramCntl0_0_sAddr_x = SdramCntl0_0_col_s;
                            SdramCntl0_0_wrPipeline_x = 5'h1;
                            SdramCntl0_0_wrTimer_x = 2;
                        end
                    end
                end
                else begin
                    SdramCntl0_0_cmd_x = 7;
                    SdramCntl0_0_state_x = 3'b100;
                end
            end
            3'b101: begin
                SdramCntl0_0_cmd_x = 3;
                SdramCntl0_0_timer_x = 1;
                SdramCntl0_0_state_x = 3'b100;
                SdramCntl0_0_rasTimer_x = 3;
                SdramCntl0_0_sAddr_x = SdramCntl0_0_row_s;
                SdramCntl0_0_activeBank_x = SdramCntl0_0_bank_s;
                SdramCntl0_0_activeRow_x[SdramCntl0_0_bank_s] = SdramCntl0_0_row_s;
                SdramCntl0_0_activeFlag_x[SdramCntl0_0_bank_s] = 1'b1;
            end
            3'b110: begin
                SdramCntl0_0_cmd_x = 1;
                SdramCntl0_0_timer_x = 4;
                SdramCntl0_0_state_x = 3'b100;
                SdramCntl0_0_rfshCntr_x = (SdramCntl0_0_rfshCntr_r - 1);
            end
            default: begin
                SdramCntl0_0_state_x = 3'b000;
            end
        endcase
    end
end


always @(posedge clk, posedge host_intf_inst_rst_i) begin: SDCNT_SDRAMCNTL0_0_SEQ_FUNC
    integer index;
    if (host_intf_inst_rst_i == 1) begin
        SdramCntl0_0_cmd_r <= 7;
        SdramCntl0_0_rdPipeline_r <= 0;
        SdramCntl0_0_sdramData_r <= 0;
        SdramCntl0_0_ba_r <= 0;
        SdramCntl0_0_wrPipeline_r <= 0;
        SdramCntl0_0_sData_r <= 0;
        SdramCntl0_0_wrTimer_r <= 0;
        SdramCntl0_0_rfshCntr_r <= 0;
        SdramCntl0_0_sAddr_r <= 0;
        SdramCntl0_0_timer_r <= 0;
        SdramCntl0_0_activeRow_r[0] <= 0;
        SdramCntl0_0_activeRow_r[1] <= 0;
        SdramCntl0_0_activeRow_r[2] <= 0;
        SdramCntl0_0_activeRow_r[3] <= 0;
        SdramCntl0_0_activeBank_r <= 0;
        SdramCntl0_0_refTimer_r <= 391;
        SdramCntl0_0_state_r <= 3'b000;
        SdramCntl0_0_rasTimer_r <= 0;
        SdramCntl0_0_sDataDir_r <= 0;
        SdramCntl0_0_activeFlag_r[0] <= 0;
        SdramCntl0_0_activeFlag_r[1] <= 0;
        SdramCntl0_0_activeFlag_r[2] <= 0;
        SdramCntl0_0_activeFlag_r[3] <= 0;
    end
    else begin
        SdramCntl0_0_state_r <= SdramCntl0_0_state_x;
        SdramCntl0_0_cmd_r <= SdramCntl0_0_cmd_x;
        SdramCntl0_0_sAddr_r <= SdramCntl0_0_sAddr_x;
        SdramCntl0_0_sData_r <= SdramCntl0_0_sData_x;
        SdramCntl0_0_sDataDir_r <= SdramCntl0_0_sDataDir_x;
        SdramCntl0_0_activeBank_r <= SdramCntl0_0_activeBank_x;
        SdramCntl0_0_sdramData_r <= SdramCntl0_0_sdramData_x;
        SdramCntl0_0_wrPipeline_r <= SdramCntl0_0_wrPipeline_x;
        SdramCntl0_0_rdPipeline_r <= SdramCntl0_0_rdPipeline_x;
        SdramCntl0_0_ba_r <= SdramCntl0_0_ba_x;
        SdramCntl0_0_timer_r <= SdramCntl0_0_timer_x;
        SdramCntl0_0_rasTimer_r <= SdramCntl0_0_rasTimer_x;
        SdramCntl0_0_refTimer_r <= SdramCntl0_0_refTimer_x;
        SdramCntl0_0_wrTimer_r <= SdramCntl0_0_wrTimer_x;
        SdramCntl0_0_rfshCntr_r <= SdramCntl0_0_rfshCntr_x;
        for (index=0; index<(2 ** 2); index=index+1) begin
            SdramCntl0_0_activeRow_r[index] <= SdramCntl0_0_activeRow_x[index];
            SdramCntl0_0_activeFlag_r[index] <= SdramCntl0_0_activeFlag_x[index];
        end
    end
end


always @(SdramCntl0_0_cmd_r, SdramCntl0_0_sData_r, SdramCntl0_0_sAddr_r, SdramCntl0_0_bank_s, SdramCntl0_0_sDataDir_r) begin: SDCNT_SDRAMCNTL0_0_SDRAM_PIN_MAP
    SdramCntl0_0_sd_intf_cke = 1;
    SdramCntl0_0_sd_intf_cs = 0;
    SdramCntl0_0_sd_intf_ras = SdramCntl0_0_cmd_r[2];
    SdramCntl0_0_sd_intf_cas = SdramCntl0_0_cmd_r[1];
    SdramCntl0_0_sd_intf_we = SdramCntl0_0_cmd_r[0];
    SdramCntl0_0_sd_intf_bs = SdramCntl0_0_bank_s;
    SdramCntl0_0_sd_intf_addr = SdramCntl0_0_sAddr_r;
    if ((SdramCntl0_0_sDataDir_r == 1'b1)) begin
        SdramCntl0_0_sDriver = SdramCntl0_0_sData_r;
    end
    else begin
        SdramCntl0_0_sDriver = 'bz;
    end
    SdramCntl0_0_sd_intf_dqml = 0;
    SdramCntl0_0_sd_intf_dqmh = 0;
end



assign SdramCntl0_0_host_intf_done_o = (SdramCntl0_0_rdPipeline_r[0] || SdramCntl0_0_wrPipeline_r[0]);
assign SdramCntl0_0_host_intf_data_o = SdramCntl0_0_sdramData_r;
assign SdramCntl0_0_host_intf_rdPending_o = SdramCntl0_0_rdInProgress_s;
assign SdramCntl0_0_sData_x = SdramCntl0_0_host_intf_data_i;



assign SdramCntl0_0_bank_s = SdramCntl0_0_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign SdramCntl0_0_ba_x = SdramCntl0_0_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign SdramCntl0_0_row_s = SdramCntl0_0_host_intf_addr_i[(13 + 9)-1:9];
assign SdramCntl0_0_col_s = SdramCntl0_0_host_intf_addr_i[9-1:0];


always @(SdramCntl0_0_activeRow_r[0], SdramCntl0_0_activeRow_r[1], SdramCntl0_0_activeRow_r[2], SdramCntl0_0_activeRow_r[3], SdramCntl0_0_rdPipeline_r, SdramCntl0_0_bank_s, SdramCntl0_0_sdramData_r, SdramCntl0_0_activeBank_r, SdramCntl0_0_wrTimer_r, SdramCntl0_0_sd_intf_dq, SdramCntl0_0_row_s, SdramCntl0_0_rasTimer_r, SdramCntl0_0_activeFlag_r[0], SdramCntl0_0_activeFlag_r[1], SdramCntl0_0_activeFlag_r[2], SdramCntl0_0_activeFlag_r[3]) begin: SDCNT_SDRAMCNTL0_0_DO_ACTIVE
    if (((SdramCntl0_0_bank_s != SdramCntl0_0_activeBank_r) || (SdramCntl0_0_row_s != SdramCntl0_0_activeRow_r[SdramCntl0_0_bank_s]) || (SdramCntl0_0_activeFlag_r[SdramCntl0_0_bank_s] == 1'b0))) begin
        SdramCntl0_0_doActivate_s = 1'b1;
    end
    else begin
        SdramCntl0_0_doActivate_s = 1'b0;
    end
    if ((SdramCntl0_0_rdPipeline_r[1] == 1'b1)) begin
        SdramCntl0_0_sdramData_x = SdramCntl0_0_sd_intf_dq;
    end
    else begin
        SdramCntl0_0_sdramData_x = SdramCntl0_0_sdramData_r;
    end
    if ((SdramCntl0_0_rasTimer_r != 0)) begin
        SdramCntl0_0_activateInProgress_s = 1'b1;
    end
    else begin
        SdramCntl0_0_activateInProgress_s = 1'b0;
    end
    if ((SdramCntl0_0_wrTimer_r != 0)) begin
        SdramCntl0_0_writeInProgress_s = 1'b1;
    end
    else begin
        SdramCntl0_0_writeInProgress_s = 1'b0;
    end
    if ((SdramCntl0_0_rdPipeline_r[(3 + 2)-1:1] != 0)) begin
        SdramCntl0_0_rdInProgress_s = 1'b1;
    end
    else begin
        SdramCntl0_0_rdInProgress_s = 1'b0;
    end
end



assign reset = ((!initialized) || (!pb_debounced));



assign sdram_clk_o = master_clk_i;
assign clk = sdram_clk_i;


always @(posedge clk) begin: SDCNT_DEBOUNCE_PB
    if ((pb_i != pb_prev)) begin
        debounce_cntr <= (49 - 1);
    end
    else begin
        if ((debounce_cntr == 0)) begin
            pb_debounced <= pb_i;
            debounce_cntr <= 1;
        end
        else begin
            debounce_cntr <= (debounce_cntr - 1);
        end
    end
    pb_prev <= pb_i;
end

endmodule
