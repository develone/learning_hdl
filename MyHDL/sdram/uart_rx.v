// File: uart_rx.v
// Generated by MyHDL 0.10
// Date: Sat Sep  8 21:14:05 2018


`timescale 1ns/10ps

module uart_rx (
    i_Clock,
    i_RX_Serial,
    o_RX_DV,
    o_RX_Byte,
    state_rx
);


input i_Clock;
input i_RX_Serial;
output o_RX_DV;
reg o_RX_DV;
output [7:0] o_RX_Byte;
reg [7:0] o_RX_Byte;
output [2:0] state_rx;
reg [2:0] state_rx;

reg r_RX_DV;
reg [11:0] r_Clock_Count;
reg [2:0] r_Bit_Index;



always @(posedge i_Clock) begin: UART_RX_RECV
    case (state_rx)
        3'b000: begin
            // Drive Line High for RX_IDLE
            r_RX_DV <= 0;
            r_Bit_Index <= 0;
            r_Clock_Count <= 0;
            if ((i_RX_Serial == 0)) begin
                state_rx <= 3'b001;
            end
            else begin
                state_rx <= 3'b000;
                // End of RX RX_IDLE state_rx
                // Start of RX RX_START_BIT state_rx
            end
        end
        3'b001: begin
            if (($signed({1'b0, r_Clock_Count}) == ((868 - 1) / 2))) begin
                if ((i_RX_Serial == 0)) begin
                    r_Clock_Count <= 0;
                    state_rx <= 3'b010;
                end
                else begin
                    state_rx <= 3'b000;
                end
            end
            else begin
                r_Clock_Count <= (r_Clock_Count + 1);
                state_rx <= 3'b001;
                // End of RX RX_START_BIT state_rx
                // Start of RX RX_DATA_BITS state_rx
            end
        end
        3'b010: begin
            if (($signed({1'b0, r_Clock_Count}) < (868 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                state_rx <= 3'b010;
            end
            else begin
                r_Clock_Count <= 0;
                o_RX_Byte[r_Bit_Index] <= i_RX_Serial;
                if ((r_Bit_Index < 7)) begin
                    r_Bit_Index <= (r_Bit_Index + 1);
                    state_rx <= 3'b010;
                end
                else begin
                    r_Bit_Index <= 0;
                    state_rx <= 3'b011;
                end
                // End of RX RX_DATA_BITS state_rx
                // Start of RX RX_STOP_BIT state_rx
            end
        end
        3'b011: begin
            if (($signed({1'b0, r_Clock_Count}) < (868 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                state_rx <= 3'b011;
            end
            else begin
                r_RX_DV <= 1;
                r_Clock_Count <= 0;
                state_rx <= 3'b100;
                // End of RX RX_STOP_BIT state_rx
                // Start of RX RX_CLEANUP state_rx
            end
        end
        3'b100: begin
            state_rx <= 3'b000;
            r_RX_DV <= 0;
        end
        default: begin
            state_rx <= 3'b000;
        end
    endcase
    o_RX_DV <= r_RX_DV;
end

endmodule
