// File: uart_tx.v
// Generated by MyHDL 0.10
// Date: Tue Sep 11 05:55:14 2018


`timescale 1ns/10ps

module uart_tx (
    i_Clock,
    i_TX_DV,
    i_TX_Byte,
    o_TX_Active,
    o_TX_Serial,
    o_TX_Done,
    state_tx
);


input i_Clock;
input i_TX_DV;
input [7:0] i_TX_Byte;
output o_TX_Active;
reg o_TX_Active;
output o_TX_Serial;
reg o_TX_Serial;
output o_TX_Done;
reg o_TX_Done;
output [2:0] state_tx;
reg [2:0] state_tx;

reg [11:0] r_Clock_Count;
reg [2:0] r_Bit_Index;
reg [7:0] r_TX_data;
reg r_TX_Active;
reg r_TX_Done;



always @(posedge i_Clock) begin: UART_TX_SEND
    case (state_tx)
        3'b000: begin
            // Drive Line High for TX_IDLE
            o_TX_Serial <= 1;
            r_TX_Done <= 0;
            r_Bit_Index <= 0;
            r_Clock_Count <= 0;
            if ((i_TX_DV == 1)) begin
                r_TX_Active <= 1;
                r_TX_data <= i_TX_Byte;
                state_tx <= 3'b001;
            end
            else begin
                state_tx <= 3'b000;
                // End of TX TX_IDLE state
                // Start of TX TX_START_BIT state
            end
        end
        3'b001: begin
            o_TX_Serial <= 0;
            if (($signed({1'b0, r_Clock_Count}) < (434 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                state_tx <= 3'b001;
            end
            else begin
                r_Clock_Count <= 0;
                state_tx <= 3'b010;
                // End of TX TX_START_BIT state_tx
                // Start of TX TX_DATA_BITS state_tx
            end
        end
        3'b010: begin
            o_TX_Serial <= r_TX_data[r_Bit_Index];
            if (($signed({1'b0, r_Clock_Count}) < (434 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                state_tx <= 3'b010;
            end
            else begin
                r_Clock_Count <= 0;
                if ((r_Bit_Index < 7)) begin
                    r_Bit_Index <= (r_Bit_Index + 1);
                    state_tx <= 3'b010;
                end
                else begin
                    r_Bit_Index <= 0;
                    state_tx <= 3'b011;
                end
                // End of TX TX_DATA_BITS state_tx
                // Start of TX TX_STOP_BIT state_tx
            end
        end
        3'b011: begin
            o_TX_Serial <= 1;
            if (($signed({1'b0, r_Clock_Count}) < (434 - 1))) begin
                r_Clock_Count <= (r_Clock_Count + 1);
                state_tx <= 3'b011;
            end
            else begin
                r_TX_Done <= 1;
                r_Clock_Count <= 0;
                state_tx <= 3'b100;
                r_TX_Active <= 0;
                // End of TX TX_STOP_BIT state_tx
                // Start of TX TX_CLEANUP state_tx
            end
        end
        3'b100: begin
            r_TX_Done <= 1;
            state_tx <= 3'b000;
        end
        default: begin
            state_tx <= 3'b000;
        end
    endcase
    o_TX_Active <= r_TX_Active;
    o_TX_Done <= r_TX_Done;
end

endmodule
