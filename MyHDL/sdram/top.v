// File: top.v
// Generated by MyHDL 0.10
// Date: Mon Oct  1 13:30:55 2018


`timescale 1ns/10ps

module top (
    clk100MHz,
    sdram_clk,
    sdram_return_clk,
    mainsdram_SdramCntl0_sd_intf_cke,
    mainsdram_SdramCntl0_sd_intf_we,
    mainsdram_SdramCntl0_sd_intf_addr,
    mainsdram_SdramCntl0_sd_intf_dqml,
    mainsdram_SdramCntl0_sd_intf_cas,
    mainsdram_SdramCntl0_sd_intf_dqmh,
    mainsdram_SdramCntl0_sd_intf_ras,
    mainsdram_SdramCntl0_sd_intf_bs,
    mainsdram_SdramCntl0_sd_intf_cs,
    mainsdram_SdramCntl0_sd_intf_dq
);


input clk100MHz;
output sdram_clk;
wire sdram_clk;
input sdram_return_clk;
output mainsdram_SdramCntl0_sd_intf_cke;
reg mainsdram_SdramCntl0_sd_intf_cke;
output mainsdram_SdramCntl0_sd_intf_we;
reg mainsdram_SdramCntl0_sd_intf_we;
output [12:0] mainsdram_SdramCntl0_sd_intf_addr;
reg [12:0] mainsdram_SdramCntl0_sd_intf_addr;
output mainsdram_SdramCntl0_sd_intf_dqml;
reg mainsdram_SdramCntl0_sd_intf_dqml;
output mainsdram_SdramCntl0_sd_intf_cas;
reg mainsdram_SdramCntl0_sd_intf_cas;
output mainsdram_SdramCntl0_sd_intf_dqmh;
reg mainsdram_SdramCntl0_sd_intf_dqmh;
output mainsdram_SdramCntl0_sd_intf_ras;
reg mainsdram_SdramCntl0_sd_intf_ras;
output [1:0] mainsdram_SdramCntl0_sd_intf_bs;
reg [1:0] mainsdram_SdramCntl0_sd_intf_bs;
output mainsdram_SdramCntl0_sd_intf_cs;
reg mainsdram_SdramCntl0_sd_intf_cs;
inout [15:0] mainsdram_SdramCntl0_sd_intf_dq;
wire [15:0] mainsdram_SdramCntl0_sd_intf_dq;

wire [31:0] i_wb_addr;
reg clk50MHz;
wire i_wb_we;
wire i_wb_stb;
wire pb;
wire i_wb_cyc;
wire [3:0] i_wb_sel;
reg o_wb_ack;
reg o_wb_stall;
wire [15:0] o_wb_data;
wire [15:0] i_wb_data;
reg mainsdram_pb_prev;
reg mainsdram_pb_debounced;
reg mainsdram_initialized;
reg [5:0] mainsdram_debounce_cntr;
wire mainsdram_clk;
wire mainsdram_reset;
reg [2:0] mainsdram_SdramCntl0_cmd_r;
reg [12:0] mainsdram_SdramCntl0_sAddr_x;
reg [2:0] mainsdram_SdramCntl0_cmd_x;
reg [1:0] mainsdram_SdramCntl0_activeBank_r;
reg [12:0] mainsdram_SdramCntl0_sAddr_r;
reg [15:0] mainsdram_SdramCntl0_sdramData_x;
reg mainsdram_SdramCntl0_activateInProgress_s;
wire mainsdram_SdramCntl0_host_intf_done_o;
reg mainsdram_SdramCntl0_sDataDir_x;
reg mainsdram_SdramCntl0_sDataDir_r;
wire [1:0] mainsdram_SdramCntl0_ba_x;
reg [4:0] mainsdram_SdramCntl0_rdPipeline_r;
wire [12:0] mainsdram_SdramCntl0_row_s;
reg [13:0] mainsdram_SdramCntl0_rfshCntr_x;
reg [1:0] mainsdram_SdramCntl0_ba_r;
reg [4:0] mainsdram_SdramCntl0_rdPipeline_x;
wire [15:0] mainsdram_SdramCntl0_host_intf_data_o;
reg [13:0] mainsdram_SdramCntl0_rfshCntr_r;
reg [15:0] mainsdram_SdramCntl0_sDriver;
reg [1:0] mainsdram_SdramCntl0_activeBank_x;
wire mainsdram_SdramCntl0_host_intf_wr_i;
reg mainsdram_SdramCntl0_doActivate_s;
wire [15:0] mainsdram_SdramCntl0_host_intf_data_i;
wire [1:0] mainsdram_SdramCntl0_bank_s;
reg [8:0] mainsdram_SdramCntl0_refTimer_r;
reg mainsdram_SdramCntl0_rdInProgress_s;
reg [8:0] mainsdram_SdramCntl0_refTimer_x;
reg mainsdram_SdramCntl0_writeInProgress_s;
reg [2:0] mainsdram_SdramCntl0_state_x;
reg [15:0] mainsdram_SdramCntl0_sData_r;
wire [8:0] mainsdram_SdramCntl0_col_s;
reg [2:0] mainsdram_SdramCntl0_state_r;
wire [15:0] mainsdram_SdramCntl0_sData_x;
reg [9:0] mainsdram_SdramCntl0_timer_x;
reg [4:0] mainsdram_SdramCntl0_wrPipeline_x;
reg [1:0] mainsdram_SdramCntl0_wrTimer_x;
wire mainsdram_SdramCntl0_host_intf_rdPending_o;
wire [23:0] mainsdram_SdramCntl0_host_intf_addr_i;
reg [4:0] mainsdram_SdramCntl0_wrPipeline_r;
reg [15:0] mainsdram_SdramCntl0_sdramData_r;
reg [1:0] mainsdram_SdramCntl0_wrTimer_r;
reg [9:0] mainsdram_SdramCntl0_timer_r;
wire mainsdram_SdramCntl0_host_intf_rd_i;
reg [1:0] mainsdram_SdramCntl0_rasTimer_x;
reg [1:0] mainsdram_SdramCntl0_rasTimer_r;
reg mainsdram_sdramdevfsm0_rand_load;
reg mainsdram_sdramdevfsm0_rand_enable;
reg mainsdram_sdramdevfsm0_rd_enable;
wire [15:0] mainsdram_sdramdevfsm0_rand_val;
reg [1:0] mainsdram_sdramdevfsm0_test_state;
reg [26:0] mainsdram_sdramdevfsm0_address;
wire mainsdram_sdramdevfsm0_host_intf_rst_i;
reg mainsdram_sdramdevfsm0_wr_enable;
reg mainsdram_sdramdevfsm0_error;
reg [15:0] mainsdram_sdramdevfsm0_data_delay0_0_tmpdata1;
reg [15:0] mainsdram_sdramdevfsm0_data_delay0_0_tmpdata;
reg [12:0] mainsdram_SdramCntl0_activeRow_x [0:4-1];
reg [12:0] mainsdram_SdramCntl0_activeRow_r [0:4-1];
reg mainsdram_SdramCntl0_activeFlag_x [0:4-1];
reg mainsdram_SdramCntl0_activeFlag_r [0:4-1];

assign i_wb_addr = 32'd0;
assign i_wb_we = 1'd0;
assign i_wb_stb = 1'd0;
assign pb = 1'd1;
assign i_wb_cyc = 1'd0;
assign i_wb_sel = 4'd0;
assign i_wb_data = 16'd0;
assign mainsdram_SdramCntl0_sd_intf_dq = mainsdram_SdramCntl0_sDriver;



assign mainsdram_reset = ((!mainsdram_initialized) || (!mainsdram_pb_debounced));



assign sdram_clk = clk50MHz;
assign mainsdram_clk = sdram_return_clk;


always @(posedge mainsdram_clk) begin: TOP_MAINSDRAM_DEBOUNCE_PB
    if ((pb != mainsdram_pb_prev)) begin
        mainsdram_debounce_cntr <= (49 - 1);
    end
    else begin
        if ((mainsdram_debounce_cntr == 0)) begin
            mainsdram_pb_debounced <= pb;
            mainsdram_debounce_cntr <= 1;
        end
        else begin
            mainsdram_debounce_cntr <= (mainsdram_debounce_cntr - 1);
        end
    end
    mainsdram_pb_prev <= pb;
end


always @(mainsdram_SdramCntl0_activeRow_r[0], mainsdram_SdramCntl0_activeRow_r[1], mainsdram_SdramCntl0_activeRow_r[2], mainsdram_SdramCntl0_activeRow_r[3], mainsdram_SdramCntl0_row_s, mainsdram_SdramCntl0_sAddr_r, mainsdram_SdramCntl0_activateInProgress_s, mainsdram_SdramCntl0_activeBank_r, mainsdram_SdramCntl0_sDataDir_r, mainsdram_SdramCntl0_ba_x, mainsdram_SdramCntl0_rdPipeline_r, mainsdram_SdramCntl0_ba_r, mainsdram_SdramCntl0_rfshCntr_r, mainsdram_SdramCntl0_host_intf_wr_i, mainsdram_SdramCntl0_doActivate_s, mainsdram_SdramCntl0_bank_s, mainsdram_SdramCntl0_refTimer_r, mainsdram_SdramCntl0_rdInProgress_s, mainsdram_SdramCntl0_writeInProgress_s, mainsdram_SdramCntl0_col_s, mainsdram_SdramCntl0_state_r, mainsdram_SdramCntl0_wrTimer_r, mainsdram_SdramCntl0_timer_r, mainsdram_SdramCntl0_host_intf_rd_i, mainsdram_SdramCntl0_rasTimer_r, mainsdram_SdramCntl0_activeFlag_r[0], mainsdram_SdramCntl0_activeFlag_r[1], mainsdram_SdramCntl0_activeFlag_r[2], mainsdram_SdramCntl0_activeFlag_r[3]) begin: TOP_MAINSDRAM_SDRAMCNTL0_COMB_FUNC
    integer index;
    mainsdram_SdramCntl0_rdPipeline_x = {1'b0, mainsdram_SdramCntl0_rdPipeline_r[(3 + 2)-1:1]};
    mainsdram_SdramCntl0_wrPipeline_x = 5'h0;
    if ((mainsdram_SdramCntl0_rasTimer_r != 0)) begin
        mainsdram_SdramCntl0_rasTimer_x = (mainsdram_SdramCntl0_rasTimer_r - 1);
    end
    else begin
        mainsdram_SdramCntl0_rasTimer_x = mainsdram_SdramCntl0_rasTimer_r;
    end
    if ((mainsdram_SdramCntl0_wrTimer_r != 0)) begin
        mainsdram_SdramCntl0_wrTimer_x = (mainsdram_SdramCntl0_wrTimer_r - 1);
    end
    else begin
        mainsdram_SdramCntl0_wrTimer_x = mainsdram_SdramCntl0_wrTimer_r;
    end
    if ((mainsdram_SdramCntl0_refTimer_r != 0)) begin
        mainsdram_SdramCntl0_refTimer_x = (mainsdram_SdramCntl0_refTimer_r - 1);
        mainsdram_SdramCntl0_rfshCntr_x = mainsdram_SdramCntl0_rfshCntr_r;
    end
    else begin
        mainsdram_SdramCntl0_refTimer_x = 391;
        mainsdram_SdramCntl0_rfshCntr_x = (mainsdram_SdramCntl0_rfshCntr_r + 1);
    end
    mainsdram_SdramCntl0_cmd_x = 7;
    mainsdram_SdramCntl0_state_x = mainsdram_SdramCntl0_state_r;
    mainsdram_SdramCntl0_sAddr_x = mainsdram_SdramCntl0_sAddr_r;
    mainsdram_SdramCntl0_activeBank_x = mainsdram_SdramCntl0_activeBank_r;
    mainsdram_SdramCntl0_sDataDir_x = mainsdram_SdramCntl0_sDataDir_r;
    for (index=0; index<(2 ** 2); index=index+1) begin
        mainsdram_SdramCntl0_activeFlag_x[index] = mainsdram_SdramCntl0_activeFlag_r[index];
        mainsdram_SdramCntl0_activeRow_x[index] = mainsdram_SdramCntl0_activeRow_r[index];
    end
    if ((mainsdram_SdramCntl0_timer_r != 0)) begin
        mainsdram_SdramCntl0_timer_x = (mainsdram_SdramCntl0_timer_r - 1);
        mainsdram_SdramCntl0_cmd_x = 7;
    end
    else begin
        mainsdram_SdramCntl0_timer_x = mainsdram_SdramCntl0_timer_r;
        case (mainsdram_SdramCntl0_state_r)
            3'b000: begin
                mainsdram_SdramCntl0_timer_x = 1000;
                mainsdram_SdramCntl0_state_x = 3'b001;
            end
            3'b001: begin
                mainsdram_SdramCntl0_cmd_x = 2;
                mainsdram_SdramCntl0_timer_x = 1;
                mainsdram_SdramCntl0_state_x = 3'b011;
                mainsdram_SdramCntl0_sAddr_x = 512;
                mainsdram_SdramCntl0_rfshCntr_x = 8;
            end
            3'b011: begin
                mainsdram_SdramCntl0_cmd_x = 1;
                mainsdram_SdramCntl0_timer_x = 4;
                mainsdram_SdramCntl0_rfshCntr_x = (mainsdram_SdramCntl0_rfshCntr_r - 1);
                if ((mainsdram_SdramCntl0_rfshCntr_r == 1)) begin
                    mainsdram_SdramCntl0_state_x = 3'b010;
                end
            end
            3'b010: begin
                mainsdram_SdramCntl0_cmd_x = 0;
                mainsdram_SdramCntl0_timer_x = 2;
                mainsdram_SdramCntl0_state_x = 3'b100;
                mainsdram_SdramCntl0_sAddr_x = 48;
            end
            3'b100: begin
                if ((mainsdram_SdramCntl0_rfshCntr_r != 0)) begin
                    if (((mainsdram_SdramCntl0_activateInProgress_s == 1'b0) && (mainsdram_SdramCntl0_writeInProgress_s == 1'b0) && (mainsdram_SdramCntl0_rdInProgress_s == 1'b0))) begin
                        mainsdram_SdramCntl0_cmd_x = 2;
                        mainsdram_SdramCntl0_timer_x = 1;
                        mainsdram_SdramCntl0_state_x = 3'b110;
                        mainsdram_SdramCntl0_sAddr_x = 512;
                        for (index=0; index<(2 ** 2); index=index+1) begin
                            mainsdram_SdramCntl0_activeFlag_x[index] = 1'b0;
                        end
                    end
                end
                else if ((mainsdram_SdramCntl0_host_intf_rd_i == 1'b1)) begin
                    if ((mainsdram_SdramCntl0_ba_x == mainsdram_SdramCntl0_ba_r)) begin
                        if ((mainsdram_SdramCntl0_doActivate_s == 1'b1)) begin
                            if (((mainsdram_SdramCntl0_activateInProgress_s == 1'b0) && (mainsdram_SdramCntl0_writeInProgress_s == 1'b0) && (mainsdram_SdramCntl0_rdInProgress_s == 1'b0))) begin
                                mainsdram_SdramCntl0_cmd_x = 2;
                                mainsdram_SdramCntl0_timer_x = 1;
                                mainsdram_SdramCntl0_state_x = 3'b101;
                                mainsdram_SdramCntl0_sAddr_x = 0;
                                mainsdram_SdramCntl0_activeFlag_x[mainsdram_SdramCntl0_bank_s] = 1'b0;
                            end
                        end
                        else if ((mainsdram_SdramCntl0_rdInProgress_s == 1'b0)) begin
                            mainsdram_SdramCntl0_cmd_x = 5;
                            mainsdram_SdramCntl0_sDataDir_x = 1'b0;
                            mainsdram_SdramCntl0_sAddr_x = mainsdram_SdramCntl0_col_s;
                            mainsdram_SdramCntl0_rdPipeline_x = {1'b1, mainsdram_SdramCntl0_rdPipeline_r[(3 + 2)-1:1]};
                        end
                    end
                end
                else if ((mainsdram_SdramCntl0_host_intf_wr_i == 1'b1)) begin
                    if ((mainsdram_SdramCntl0_ba_x == mainsdram_SdramCntl0_ba_r)) begin
                        if ((mainsdram_SdramCntl0_doActivate_s == 1'b1)) begin
                            if (((mainsdram_SdramCntl0_activateInProgress_s == 1'b0) && (mainsdram_SdramCntl0_writeInProgress_s == 1'b0) && (mainsdram_SdramCntl0_rdInProgress_s == 1'b0))) begin
                                mainsdram_SdramCntl0_cmd_x = 2;
                                mainsdram_SdramCntl0_timer_x = 1;
                                mainsdram_SdramCntl0_state_x = 3'b101;
                                mainsdram_SdramCntl0_sAddr_x = 0;
                                mainsdram_SdramCntl0_activeFlag_x[mainsdram_SdramCntl0_bank_s] = 1'b0;
                            end
                        end
                        else if ((mainsdram_SdramCntl0_rdInProgress_s == 1'b0)) begin
                            mainsdram_SdramCntl0_cmd_x = 4;
                            mainsdram_SdramCntl0_sDataDir_x = 1'b1;
                            mainsdram_SdramCntl0_sAddr_x = mainsdram_SdramCntl0_col_s;
                            mainsdram_SdramCntl0_wrPipeline_x = 5'h1;
                            mainsdram_SdramCntl0_wrTimer_x = 2;
                        end
                    end
                end
                else begin
                    mainsdram_SdramCntl0_cmd_x = 7;
                    mainsdram_SdramCntl0_state_x = 3'b100;
                end
            end
            3'b101: begin
                mainsdram_SdramCntl0_cmd_x = 3;
                mainsdram_SdramCntl0_timer_x = 1;
                mainsdram_SdramCntl0_state_x = 3'b100;
                mainsdram_SdramCntl0_rasTimer_x = 3;
                mainsdram_SdramCntl0_sAddr_x = mainsdram_SdramCntl0_row_s;
                mainsdram_SdramCntl0_activeBank_x = mainsdram_SdramCntl0_bank_s;
                mainsdram_SdramCntl0_activeRow_x[mainsdram_SdramCntl0_bank_s] = mainsdram_SdramCntl0_row_s;
                mainsdram_SdramCntl0_activeFlag_x[mainsdram_SdramCntl0_bank_s] = 1'b1;
            end
            3'b110: begin
                mainsdram_SdramCntl0_cmd_x = 1;
                mainsdram_SdramCntl0_timer_x = 4;
                mainsdram_SdramCntl0_state_x = 3'b100;
                mainsdram_SdramCntl0_rfshCntr_x = (mainsdram_SdramCntl0_rfshCntr_r - 1);
            end
            default: begin
                mainsdram_SdramCntl0_state_x = 3'b000;
            end
        endcase
    end
end


always @(posedge mainsdram_clk, posedge mainsdram_sdramdevfsm0_host_intf_rst_i) begin: TOP_MAINSDRAM_SDRAMCNTL0_SEQ_FUNC
    integer index;
    if (mainsdram_sdramdevfsm0_host_intf_rst_i == 1) begin
        mainsdram_SdramCntl0_cmd_r <= 7;
        mainsdram_SdramCntl0_rdPipeline_r <= 0;
        mainsdram_SdramCntl0_sdramData_r <= 0;
        mainsdram_SdramCntl0_ba_r <= 0;
        mainsdram_SdramCntl0_wrPipeline_r <= 0;
        mainsdram_SdramCntl0_sData_r <= 0;
        mainsdram_SdramCntl0_wrTimer_r <= 0;
        mainsdram_SdramCntl0_rfshCntr_r <= 0;
        mainsdram_SdramCntl0_sAddr_r <= 0;
        mainsdram_SdramCntl0_timer_r <= 0;
        mainsdram_SdramCntl0_activeRow_r[0] <= 0;
        mainsdram_SdramCntl0_activeRow_r[1] <= 0;
        mainsdram_SdramCntl0_activeRow_r[2] <= 0;
        mainsdram_SdramCntl0_activeRow_r[3] <= 0;
        mainsdram_SdramCntl0_activeBank_r <= 0;
        mainsdram_SdramCntl0_refTimer_r <= 391;
        mainsdram_SdramCntl0_state_r <= 3'b000;
        mainsdram_SdramCntl0_rasTimer_r <= 0;
        mainsdram_SdramCntl0_sDataDir_r <= 0;
        mainsdram_SdramCntl0_activeFlag_r[0] <= 0;
        mainsdram_SdramCntl0_activeFlag_r[1] <= 0;
        mainsdram_SdramCntl0_activeFlag_r[2] <= 0;
        mainsdram_SdramCntl0_activeFlag_r[3] <= 0;
    end
    else begin
        mainsdram_SdramCntl0_state_r <= mainsdram_SdramCntl0_state_x;
        mainsdram_SdramCntl0_cmd_r <= mainsdram_SdramCntl0_cmd_x;
        mainsdram_SdramCntl0_sAddr_r <= mainsdram_SdramCntl0_sAddr_x;
        mainsdram_SdramCntl0_sData_r <= mainsdram_SdramCntl0_sData_x;
        mainsdram_SdramCntl0_sDataDir_r <= mainsdram_SdramCntl0_sDataDir_x;
        mainsdram_SdramCntl0_activeBank_r <= mainsdram_SdramCntl0_activeBank_x;
        mainsdram_SdramCntl0_sdramData_r <= mainsdram_SdramCntl0_sdramData_x;
        mainsdram_SdramCntl0_wrPipeline_r <= mainsdram_SdramCntl0_wrPipeline_x;
        mainsdram_SdramCntl0_rdPipeline_r <= mainsdram_SdramCntl0_rdPipeline_x;
        mainsdram_SdramCntl0_ba_r <= mainsdram_SdramCntl0_ba_x;
        mainsdram_SdramCntl0_timer_r <= mainsdram_SdramCntl0_timer_x;
        mainsdram_SdramCntl0_rasTimer_r <= mainsdram_SdramCntl0_rasTimer_x;
        mainsdram_SdramCntl0_refTimer_r <= mainsdram_SdramCntl0_refTimer_x;
        mainsdram_SdramCntl0_wrTimer_r <= mainsdram_SdramCntl0_wrTimer_x;
        mainsdram_SdramCntl0_rfshCntr_r <= mainsdram_SdramCntl0_rfshCntr_x;
        for (index=0; index<(2 ** 2); index=index+1) begin
            mainsdram_SdramCntl0_activeRow_r[index] <= mainsdram_SdramCntl0_activeRow_x[index];
            mainsdram_SdramCntl0_activeFlag_r[index] <= mainsdram_SdramCntl0_activeFlag_x[index];
        end
    end
end


always @(mainsdram_SdramCntl0_cmd_r, mainsdram_SdramCntl0_sData_r, mainsdram_SdramCntl0_sAddr_r, mainsdram_SdramCntl0_bank_s, mainsdram_SdramCntl0_sDataDir_r) begin: TOP_MAINSDRAM_SDRAMCNTL0_SDRAM_PIN_MAP
    mainsdram_SdramCntl0_sd_intf_cke = 1;
    mainsdram_SdramCntl0_sd_intf_cs = 0;
    mainsdram_SdramCntl0_sd_intf_ras = mainsdram_SdramCntl0_cmd_r[2];
    mainsdram_SdramCntl0_sd_intf_cas = mainsdram_SdramCntl0_cmd_r[1];
    mainsdram_SdramCntl0_sd_intf_we = mainsdram_SdramCntl0_cmd_r[0];
    mainsdram_SdramCntl0_sd_intf_bs = mainsdram_SdramCntl0_bank_s;
    mainsdram_SdramCntl0_sd_intf_addr = mainsdram_SdramCntl0_sAddr_r;
    if ((mainsdram_SdramCntl0_sDataDir_r == 1'b1)) begin
        mainsdram_SdramCntl0_sDriver = mainsdram_SdramCntl0_sData_r;
    end
    else begin
        mainsdram_SdramCntl0_sDriver = 'bz;
    end
    mainsdram_SdramCntl0_sd_intf_dqml = 0;
    mainsdram_SdramCntl0_sd_intf_dqmh = 0;
end



assign mainsdram_SdramCntl0_host_intf_done_o = (mainsdram_SdramCntl0_rdPipeline_r[0] || mainsdram_SdramCntl0_wrPipeline_r[0]);
assign mainsdram_SdramCntl0_host_intf_data_o = mainsdram_SdramCntl0_sdramData_r;
assign mainsdram_SdramCntl0_host_intf_rdPending_o = mainsdram_SdramCntl0_rdInProgress_s;
assign mainsdram_SdramCntl0_sData_x = mainsdram_SdramCntl0_host_intf_data_i;



assign mainsdram_SdramCntl0_bank_s = mainsdram_SdramCntl0_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign mainsdram_SdramCntl0_ba_x = mainsdram_SdramCntl0_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign mainsdram_SdramCntl0_row_s = mainsdram_SdramCntl0_host_intf_addr_i[(13 + 9)-1:9];
assign mainsdram_SdramCntl0_col_s = mainsdram_SdramCntl0_host_intf_addr_i[9-1:0];


always @(mainsdram_SdramCntl0_activeRow_r[0], mainsdram_SdramCntl0_activeRow_r[1], mainsdram_SdramCntl0_activeRow_r[2], mainsdram_SdramCntl0_activeRow_r[3], mainsdram_SdramCntl0_rdPipeline_r, mainsdram_SdramCntl0_bank_s, mainsdram_SdramCntl0_sdramData_r, mainsdram_SdramCntl0_activeBank_r, mainsdram_SdramCntl0_wrTimer_r, mainsdram_SdramCntl0_sd_intf_dq, mainsdram_SdramCntl0_row_s, mainsdram_SdramCntl0_rasTimer_r, mainsdram_SdramCntl0_activeFlag_r[0], mainsdram_SdramCntl0_activeFlag_r[1], mainsdram_SdramCntl0_activeFlag_r[2], mainsdram_SdramCntl0_activeFlag_r[3]) begin: TOP_MAINSDRAM_SDRAMCNTL0_DO_ACTIVE
    if (((mainsdram_SdramCntl0_bank_s != mainsdram_SdramCntl0_activeBank_r) || (mainsdram_SdramCntl0_row_s != mainsdram_SdramCntl0_activeRow_r[mainsdram_SdramCntl0_bank_s]) || (mainsdram_SdramCntl0_activeFlag_r[mainsdram_SdramCntl0_bank_s] == 1'b0))) begin
        mainsdram_SdramCntl0_doActivate_s = 1'b1;
    end
    else begin
        mainsdram_SdramCntl0_doActivate_s = 1'b0;
    end
    if ((mainsdram_SdramCntl0_rdPipeline_r[1] == 1'b1)) begin
        mainsdram_SdramCntl0_sdramData_x = mainsdram_SdramCntl0_sd_intf_dq;
    end
    else begin
        mainsdram_SdramCntl0_sdramData_x = mainsdram_SdramCntl0_sdramData_r;
    end
    if ((mainsdram_SdramCntl0_rasTimer_r != 0)) begin
        mainsdram_SdramCntl0_activateInProgress_s = 1'b1;
    end
    else begin
        mainsdram_SdramCntl0_activateInProgress_s = 1'b0;
    end
    if ((mainsdram_SdramCntl0_wrTimer_r != 0)) begin
        mainsdram_SdramCntl0_writeInProgress_s = 1'b1;
    end
    else begin
        mainsdram_SdramCntl0_writeInProgress_s = 1'b0;
    end
    if ((mainsdram_SdramCntl0_rdPipeline_r[(3 + 2)-1:1] != 0)) begin
        mainsdram_SdramCntl0_rdInProgress_s = 1'b1;
    end
    else begin
        mainsdram_SdramCntl0_rdInProgress_s = 1'b0;
    end
end


always @(posedge mainsdram_clk) begin: TOP_MAINSDRAM_INTERNAL_RESET
    if ((mainsdram_initialized == 1'b0)) begin
        mainsdram_initialized <= (!mainsdram_initialized);
    end
end

// In this section data is transferred to host_intf

assign mainsdram_sdramdevfsm0_host_intf_rst_i = mainsdram_reset;
assign mainsdram_SdramCntl0_host_intf_wr_i = (mainsdram_sdramdevfsm0_wr_enable && (!mainsdram_SdramCntl0_host_intf_done_o));
assign mainsdram_SdramCntl0_host_intf_rd_i = (mainsdram_sdramdevfsm0_rd_enable && (!mainsdram_SdramCntl0_host_intf_done_o));
assign mainsdram_SdramCntl0_host_intf_data_i = mainsdram_sdramdevfsm0_rand_val;
assign mainsdram_SdramCntl0_host_intf_addr_i = mainsdram_sdramdevfsm0_address;
assign o_wb_data = mainsdram_SdramCntl0_host_intf_data_o;


always @(posedge mainsdram_clk) begin: TOP_MAINSDRAM_SDRAMDEVFSM0_SDRAM_FSM
    if ((mainsdram_reset == 1'b1)) begin
        mainsdram_sdramdevfsm0_error <= 1'b0;
        mainsdram_sdramdevfsm0_test_state <= 2'b01;
    end
    else if ((mainsdram_sdramdevfsm0_test_state == 2'b01)) begin
        mainsdram_sdramdevfsm0_rand_load <= 1;
        // Load the data_i into tmpdata
        // this is the write & read req using wb
        // i_wb_stb & i_wb_we is 1 is a write
        // i_wb_stb & i_wb_we is 0 is a read
        if (((i_wb_cyc == 1) && (i_wb_sel == 15))) begin
            o_wb_stall <= 1;
            o_wb_ack <= 0;
            // this is the write req from wb
            // i_wb_we is 1
            if ((i_wb_we == 1)) begin
                mainsdram_sdramdevfsm0_rand_load <= 0;
                mainsdram_sdramdevfsm0_address <= i_wb_addr;
                mainsdram_sdramdevfsm0_rand_enable <= 1;
                // copy the the tmpdata which 
                // is the data_i to tmpdata1
            end
            else begin
                // this is the read req from wb
                mainsdram_sdramdevfsm0_address <= i_wb_addr;
                // wait for read to be done
                if ((mainsdram_SdramCntl0_host_intf_done_o == 0)) begin
                    mainsdram_sdramdevfsm0_rd_enable <= 1;
                end
                else begin
                    o_wb_stall <= 0;
                    o_wb_ack <= 1;
                    mainsdram_sdramdevfsm0_rd_enable <= 0;
                    mainsdram_sdramdevfsm0_test_state <= 2'b10;
                end
            end
            // wait for write to be done
            if ((mainsdram_SdramCntl0_host_intf_done_o == 0)) begin
                mainsdram_sdramdevfsm0_wr_enable <= 1;
                o_wb_stall <= 1;
            end
            else begin
                o_wb_stall <= 0;
                o_wb_ack <= 1;
                mainsdram_sdramdevfsm0_wr_enable <= 0;
                mainsdram_sdramdevfsm0_rd_enable <= 0;
                mainsdram_sdramdevfsm0_rand_enable <= 0;
                mainsdram_sdramdevfsm0_rand_load <= 1;
                mainsdram_sdramdevfsm0_test_state <= 2'b10;
            end
        end
    end
    else begin
        mainsdram_sdramdevfsm0_rand_load <= 1;
        mainsdram_sdramdevfsm0_rand_enable <= 0;
        o_wb_ack <= 0;
        mainsdram_sdramdevfsm0_error <= 1'b0;
        if ((i_wb_stb == 1)) begin
            mainsdram_sdramdevfsm0_test_state <= 2'b01;
        end
    end
end



assign mainsdram_sdramdevfsm0_rand_val = mainsdram_sdramdevfsm0_data_delay0_0_tmpdata1;


always @(posedge mainsdram_clk) begin: TOP_MAINSDRAM_SDRAMDEVFSM0_DATA_DELAY0_0_DELAYED
    if (mainsdram_sdramdevfsm0_rand_load) begin
        mainsdram_sdramdevfsm0_data_delay0_0_tmpdata <= i_wb_data;
    end
    else if (mainsdram_sdramdevfsm0_rand_enable) begin
        mainsdram_sdramdevfsm0_data_delay0_0_tmpdata1 <= mainsdram_sdramdevfsm0_data_delay0_0_tmpdata;
    end
end


always @(posedge clk100MHz) begin: TOP_DIVCLKBY20_0_DIV2
    clk50MHz <= (!clk50MHz);
end

endmodule
