// File: top.v
// Generated by MyHDL 0.10
// Date: Mon Oct  1 18:19:28 2018


`timescale 1ns/10ps

module top (
    clk100MHz,
    sdram_clk,
    sdram_return_clk,
    led_status,
    pb,
    memdev0_SdramCntl0_sd_intf_cke,
    memdev0_SdramCntl0_sd_intf_we,
    memdev0_SdramCntl0_sd_intf_addr,
    memdev0_SdramCntl0_sd_intf_dqml,
    memdev0_SdramCntl0_sd_intf_cas,
    memdev0_SdramCntl0_sd_intf_dqmh,
    memdev0_SdramCntl0_sd_intf_ras,
    memdev0_SdramCntl0_sd_intf_bs,
    memdev0_SdramCntl0_sd_intf_cs,
    memdev0_SdramCntl0_sd_intf_dq
);


input clk100MHz;
output sdram_clk;
wire sdram_clk;
input sdram_return_clk;
output [3:0] led_status;
reg [3:0] led_status;
input pb;
output memdev0_SdramCntl0_sd_intf_cke;
reg memdev0_SdramCntl0_sd_intf_cke;
output memdev0_SdramCntl0_sd_intf_we;
reg memdev0_SdramCntl0_sd_intf_we;
output [12:0] memdev0_SdramCntl0_sd_intf_addr;
reg [12:0] memdev0_SdramCntl0_sd_intf_addr;
output memdev0_SdramCntl0_sd_intf_dqml;
reg memdev0_SdramCntl0_sd_intf_dqml;
output memdev0_SdramCntl0_sd_intf_cas;
reg memdev0_SdramCntl0_sd_intf_cas;
output memdev0_SdramCntl0_sd_intf_dqmh;
reg memdev0_SdramCntl0_sd_intf_dqmh;
output memdev0_SdramCntl0_sd_intf_ras;
reg memdev0_SdramCntl0_sd_intf_ras;
output [1:0] memdev0_SdramCntl0_sd_intf_bs;
reg [1:0] memdev0_SdramCntl0_sd_intf_bs;
output memdev0_SdramCntl0_sd_intf_cs;
reg memdev0_SdramCntl0_sd_intf_cs;
inout [15:0] memdev0_SdramCntl0_sd_intf_dq;
wire [15:0] memdev0_SdramCntl0_sd_intf_dq;

reg clk50MHz;
wire memdev0_reset;
reg [5:0] memdev0_debounce_cntr;
reg memdev0_pb_prev;
wire memdev0_clk;
reg memdev0_pb_debounced;
reg memdev0_initialized;
reg [2:0] memdev0_SdramCntl0_cmd_r;
reg [12:0] memdev0_SdramCntl0_sAddr_x;
reg [2:0] memdev0_SdramCntl0_cmd_x;
reg [1:0] memdev0_SdramCntl0_activeBank_r;
reg [12:0] memdev0_SdramCntl0_sAddr_r;
reg [15:0] memdev0_SdramCntl0_sdramData_x;
reg memdev0_SdramCntl0_activateInProgress_s;
wire memdev0_SdramCntl0_host_intf_done_o;
reg memdev0_SdramCntl0_sDataDir_x;
reg memdev0_SdramCntl0_sDataDir_r;
wire [1:0] memdev0_SdramCntl0_ba_x;
reg [4:0] memdev0_SdramCntl0_rdPipeline_r;
wire [12:0] memdev0_SdramCntl0_row_s;
reg [13:0] memdev0_SdramCntl0_rfshCntr_x;
reg [1:0] memdev0_SdramCntl0_ba_r;
reg [4:0] memdev0_SdramCntl0_rdPipeline_x;
wire [15:0] memdev0_SdramCntl0_host_intf_data_o;
reg [13:0] memdev0_SdramCntl0_rfshCntr_r;
reg [15:0] memdev0_SdramCntl0_sDriver;
reg [1:0] memdev0_SdramCntl0_activeBank_x;
wire memdev0_SdramCntl0_host_intf_wr_i;
reg memdev0_SdramCntl0_doActivate_s;
wire [15:0] memdev0_SdramCntl0_host_intf_data_i;
wire [1:0] memdev0_SdramCntl0_bank_s;
reg [8:0] memdev0_SdramCntl0_refTimer_r;
reg memdev0_SdramCntl0_rdInProgress_s;
reg [8:0] memdev0_SdramCntl0_refTimer_x;
reg memdev0_SdramCntl0_writeInProgress_s;
reg [2:0] memdev0_SdramCntl0_state_x;
reg [15:0] memdev0_SdramCntl0_sData_r;
wire [8:0] memdev0_SdramCntl0_col_s;
reg [2:0] memdev0_SdramCntl0_state_r;
wire [15:0] memdev0_SdramCntl0_sData_x;
reg [9:0] memdev0_SdramCntl0_timer_x;
reg [4:0] memdev0_SdramCntl0_wrPipeline_x;
reg [1:0] memdev0_SdramCntl0_wrTimer_x;
wire memdev0_SdramCntl0_host_intf_rdPending_o;
wire [23:0] memdev0_SdramCntl0_host_intf_addr_i;
reg [4:0] memdev0_SdramCntl0_wrPipeline_r;
reg [15:0] memdev0_SdramCntl0_sdramData_r;
reg [1:0] memdev0_SdramCntl0_wrTimer_r;
reg [9:0] memdev0_SdramCntl0_timer_r;
wire memdev0_SdramCntl0_host_intf_rd_i;
reg [1:0] memdev0_SdramCntl0_rasTimer_x;
reg [1:0] memdev0_SdramCntl0_rasTimer_r;
reg [7:0] memdev0_memory_test0_status_o;
reg memdev0_memory_test0_rand_load;
reg memdev0_memory_test0_rand_enable;
wire [15:0] memdev0_memory_test0_rand_val;
reg memdev0_memory_test0_rd_enable;
reg [1:0] memdev0_memory_test0_test_state;
reg [26:0] memdev0_memory_test0_address;
wire memdev0_memory_test0_host_intf_rst_i;
reg memdev0_memory_test0_wr_enable;
reg memdev0_memory_test0_error;
reg [15:0] memdev0_memory_test0_uniform_rand_gen0_shfreg;
reg [12:0] memdev0_SdramCntl0_activeRow_x [0:4-1];
reg [12:0] memdev0_SdramCntl0_activeRow_r [0:4-1];
reg memdev0_SdramCntl0_activeFlag_x [0:4-1];
reg memdev0_SdramCntl0_activeFlag_r [0:4-1];

assign memdev0_SdramCntl0_sd_intf_dq = memdev0_SdramCntl0_sDriver;



assign memdev0_reset = ((!memdev0_initialized) || (!memdev0_pb_debounced));



assign sdram_clk = clk50MHz;
assign memdev0_clk = sdram_return_clk;


always @(posedge memdev0_clk) begin: TOP_MEMDEV0_DEBOUNCE_PB
    if ((pb != memdev0_pb_prev)) begin
        memdev0_debounce_cntr <= (49 - 1);
    end
    else begin
        if ((memdev0_debounce_cntr == 0)) begin
            memdev0_pb_debounced <= pb;
            memdev0_debounce_cntr <= 1;
        end
        else begin
            memdev0_debounce_cntr <= (memdev0_debounce_cntr - 1);
        end
    end
    memdev0_pb_prev <= pb;
end


always @(posedge memdev0_clk) begin: TOP_MEMDEV0_INTERNAL_RESET
    if ((memdev0_initialized == 1'b0)) begin
        memdev0_initialized <= (!memdev0_initialized);
    end
end


always @(memdev0_SdramCntl0_activeRow_r[0], memdev0_SdramCntl0_activeRow_r[1], memdev0_SdramCntl0_activeRow_r[2], memdev0_SdramCntl0_activeRow_r[3], memdev0_SdramCntl0_row_s, memdev0_SdramCntl0_sAddr_r, memdev0_SdramCntl0_activateInProgress_s, memdev0_SdramCntl0_activeBank_r, memdev0_SdramCntl0_sDataDir_r, memdev0_SdramCntl0_ba_x, memdev0_SdramCntl0_rdPipeline_r, memdev0_SdramCntl0_ba_r, memdev0_SdramCntl0_rfshCntr_r, memdev0_SdramCntl0_host_intf_wr_i, memdev0_SdramCntl0_doActivate_s, memdev0_SdramCntl0_bank_s, memdev0_SdramCntl0_refTimer_r, memdev0_SdramCntl0_rdInProgress_s, memdev0_SdramCntl0_writeInProgress_s, memdev0_SdramCntl0_col_s, memdev0_SdramCntl0_state_r, memdev0_SdramCntl0_wrTimer_r, memdev0_SdramCntl0_timer_r, memdev0_SdramCntl0_host_intf_rd_i, memdev0_SdramCntl0_rasTimer_r, memdev0_SdramCntl0_activeFlag_r[0], memdev0_SdramCntl0_activeFlag_r[1], memdev0_SdramCntl0_activeFlag_r[2], memdev0_SdramCntl0_activeFlag_r[3]) begin: TOP_MEMDEV0_SDRAMCNTL0_COMB_FUNC
    integer index;
    memdev0_SdramCntl0_rdPipeline_x = {1'b0, memdev0_SdramCntl0_rdPipeline_r[(3 + 2)-1:1]};
    memdev0_SdramCntl0_wrPipeline_x = 5'h0;
    if ((memdev0_SdramCntl0_rasTimer_r != 0)) begin
        memdev0_SdramCntl0_rasTimer_x = (memdev0_SdramCntl0_rasTimer_r - 1);
    end
    else begin
        memdev0_SdramCntl0_rasTimer_x = memdev0_SdramCntl0_rasTimer_r;
    end
    if ((memdev0_SdramCntl0_wrTimer_r != 0)) begin
        memdev0_SdramCntl0_wrTimer_x = (memdev0_SdramCntl0_wrTimer_r - 1);
    end
    else begin
        memdev0_SdramCntl0_wrTimer_x = memdev0_SdramCntl0_wrTimer_r;
    end
    if ((memdev0_SdramCntl0_refTimer_r != 0)) begin
        memdev0_SdramCntl0_refTimer_x = (memdev0_SdramCntl0_refTimer_r - 1);
        memdev0_SdramCntl0_rfshCntr_x = memdev0_SdramCntl0_rfshCntr_r;
    end
    else begin
        memdev0_SdramCntl0_refTimer_x = 391;
        memdev0_SdramCntl0_rfshCntr_x = (memdev0_SdramCntl0_rfshCntr_r + 1);
    end
    memdev0_SdramCntl0_cmd_x = 7;
    memdev0_SdramCntl0_state_x = memdev0_SdramCntl0_state_r;
    memdev0_SdramCntl0_sAddr_x = memdev0_SdramCntl0_sAddr_r;
    memdev0_SdramCntl0_activeBank_x = memdev0_SdramCntl0_activeBank_r;
    memdev0_SdramCntl0_sDataDir_x = memdev0_SdramCntl0_sDataDir_r;
    for (index=0; index<(2 ** 2); index=index+1) begin
        memdev0_SdramCntl0_activeFlag_x[index] = memdev0_SdramCntl0_activeFlag_r[index];
        memdev0_SdramCntl0_activeRow_x[index] = memdev0_SdramCntl0_activeRow_r[index];
    end
    if ((memdev0_SdramCntl0_timer_r != 0)) begin
        memdev0_SdramCntl0_timer_x = (memdev0_SdramCntl0_timer_r - 1);
        memdev0_SdramCntl0_cmd_x = 7;
    end
    else begin
        memdev0_SdramCntl0_timer_x = memdev0_SdramCntl0_timer_r;
        case (memdev0_SdramCntl0_state_r)
            3'b000: begin
                memdev0_SdramCntl0_timer_x = 1000;
                memdev0_SdramCntl0_state_x = 3'b001;
            end
            3'b001: begin
                memdev0_SdramCntl0_cmd_x = 2;
                memdev0_SdramCntl0_timer_x = 1;
                memdev0_SdramCntl0_state_x = 3'b011;
                memdev0_SdramCntl0_sAddr_x = 512;
                memdev0_SdramCntl0_rfshCntr_x = 8;
            end
            3'b011: begin
                memdev0_SdramCntl0_cmd_x = 1;
                memdev0_SdramCntl0_timer_x = 4;
                memdev0_SdramCntl0_rfshCntr_x = (memdev0_SdramCntl0_rfshCntr_r - 1);
                if ((memdev0_SdramCntl0_rfshCntr_r == 1)) begin
                    memdev0_SdramCntl0_state_x = 3'b010;
                end
            end
            3'b010: begin
                memdev0_SdramCntl0_cmd_x = 0;
                memdev0_SdramCntl0_timer_x = 2;
                memdev0_SdramCntl0_state_x = 3'b100;
                memdev0_SdramCntl0_sAddr_x = 48;
            end
            3'b100: begin
                if ((memdev0_SdramCntl0_rfshCntr_r != 0)) begin
                    if (((memdev0_SdramCntl0_activateInProgress_s == 1'b0) && (memdev0_SdramCntl0_writeInProgress_s == 1'b0) && (memdev0_SdramCntl0_rdInProgress_s == 1'b0))) begin
                        memdev0_SdramCntl0_cmd_x = 2;
                        memdev0_SdramCntl0_timer_x = 1;
                        memdev0_SdramCntl0_state_x = 3'b110;
                        memdev0_SdramCntl0_sAddr_x = 512;
                        for (index=0; index<(2 ** 2); index=index+1) begin
                            memdev0_SdramCntl0_activeFlag_x[index] = 1'b0;
                        end
                    end
                end
                else if ((memdev0_SdramCntl0_host_intf_rd_i == 1'b1)) begin
                    if ((memdev0_SdramCntl0_ba_x == memdev0_SdramCntl0_ba_r)) begin
                        if ((memdev0_SdramCntl0_doActivate_s == 1'b1)) begin
                            if (((memdev0_SdramCntl0_activateInProgress_s == 1'b0) && (memdev0_SdramCntl0_writeInProgress_s == 1'b0) && (memdev0_SdramCntl0_rdInProgress_s == 1'b0))) begin
                                memdev0_SdramCntl0_cmd_x = 2;
                                memdev0_SdramCntl0_timer_x = 1;
                                memdev0_SdramCntl0_state_x = 3'b101;
                                memdev0_SdramCntl0_sAddr_x = 0;
                                memdev0_SdramCntl0_activeFlag_x[memdev0_SdramCntl0_bank_s] = 1'b0;
                            end
                        end
                        else if ((memdev0_SdramCntl0_rdInProgress_s == 1'b0)) begin
                            memdev0_SdramCntl0_cmd_x = 5;
                            memdev0_SdramCntl0_sDataDir_x = 1'b0;
                            memdev0_SdramCntl0_sAddr_x = memdev0_SdramCntl0_col_s;
                            memdev0_SdramCntl0_rdPipeline_x = {1'b1, memdev0_SdramCntl0_rdPipeline_r[(3 + 2)-1:1]};
                        end
                    end
                end
                else if ((memdev0_SdramCntl0_host_intf_wr_i == 1'b1)) begin
                    if ((memdev0_SdramCntl0_ba_x == memdev0_SdramCntl0_ba_r)) begin
                        if ((memdev0_SdramCntl0_doActivate_s == 1'b1)) begin
                            if (((memdev0_SdramCntl0_activateInProgress_s == 1'b0) && (memdev0_SdramCntl0_writeInProgress_s == 1'b0) && (memdev0_SdramCntl0_rdInProgress_s == 1'b0))) begin
                                memdev0_SdramCntl0_cmd_x = 2;
                                memdev0_SdramCntl0_timer_x = 1;
                                memdev0_SdramCntl0_state_x = 3'b101;
                                memdev0_SdramCntl0_sAddr_x = 0;
                                memdev0_SdramCntl0_activeFlag_x[memdev0_SdramCntl0_bank_s] = 1'b0;
                            end
                        end
                        else if ((memdev0_SdramCntl0_rdInProgress_s == 1'b0)) begin
                            memdev0_SdramCntl0_cmd_x = 4;
                            memdev0_SdramCntl0_sDataDir_x = 1'b1;
                            memdev0_SdramCntl0_sAddr_x = memdev0_SdramCntl0_col_s;
                            memdev0_SdramCntl0_wrPipeline_x = 5'h1;
                            memdev0_SdramCntl0_wrTimer_x = 2;
                        end
                    end
                end
                else begin
                    memdev0_SdramCntl0_cmd_x = 7;
                    memdev0_SdramCntl0_state_x = 3'b100;
                end
            end
            3'b101: begin
                memdev0_SdramCntl0_cmd_x = 3;
                memdev0_SdramCntl0_timer_x = 1;
                memdev0_SdramCntl0_state_x = 3'b100;
                memdev0_SdramCntl0_rasTimer_x = 3;
                memdev0_SdramCntl0_sAddr_x = memdev0_SdramCntl0_row_s;
                memdev0_SdramCntl0_activeBank_x = memdev0_SdramCntl0_bank_s;
                memdev0_SdramCntl0_activeRow_x[memdev0_SdramCntl0_bank_s] = memdev0_SdramCntl0_row_s;
                memdev0_SdramCntl0_activeFlag_x[memdev0_SdramCntl0_bank_s] = 1'b1;
            end
            3'b110: begin
                memdev0_SdramCntl0_cmd_x = 1;
                memdev0_SdramCntl0_timer_x = 4;
                memdev0_SdramCntl0_state_x = 3'b100;
                memdev0_SdramCntl0_rfshCntr_x = (memdev0_SdramCntl0_rfshCntr_r - 1);
            end
            default: begin
                memdev0_SdramCntl0_state_x = 3'b000;
            end
        endcase
    end
end


always @(posedge memdev0_clk, posedge memdev0_memory_test0_host_intf_rst_i) begin: TOP_MEMDEV0_SDRAMCNTL0_SEQ_FUNC
    integer index;
    if (memdev0_memory_test0_host_intf_rst_i == 1) begin
        memdev0_SdramCntl0_cmd_r <= 7;
        memdev0_SdramCntl0_rdPipeline_r <= 0;
        memdev0_SdramCntl0_sdramData_r <= 0;
        memdev0_SdramCntl0_ba_r <= 0;
        memdev0_SdramCntl0_wrPipeline_r <= 0;
        memdev0_SdramCntl0_sData_r <= 0;
        memdev0_SdramCntl0_wrTimer_r <= 0;
        memdev0_SdramCntl0_rfshCntr_r <= 0;
        memdev0_SdramCntl0_sAddr_r <= 0;
        memdev0_SdramCntl0_timer_r <= 0;
        memdev0_SdramCntl0_activeRow_r[0] <= 0;
        memdev0_SdramCntl0_activeRow_r[1] <= 0;
        memdev0_SdramCntl0_activeRow_r[2] <= 0;
        memdev0_SdramCntl0_activeRow_r[3] <= 0;
        memdev0_SdramCntl0_activeBank_r <= 0;
        memdev0_SdramCntl0_refTimer_r <= 391;
        memdev0_SdramCntl0_state_r <= 3'b000;
        memdev0_SdramCntl0_rasTimer_r <= 0;
        memdev0_SdramCntl0_sDataDir_r <= 0;
        memdev0_SdramCntl0_activeFlag_r[0] <= 0;
        memdev0_SdramCntl0_activeFlag_r[1] <= 0;
        memdev0_SdramCntl0_activeFlag_r[2] <= 0;
        memdev0_SdramCntl0_activeFlag_r[3] <= 0;
    end
    else begin
        memdev0_SdramCntl0_state_r <= memdev0_SdramCntl0_state_x;
        memdev0_SdramCntl0_cmd_r <= memdev0_SdramCntl0_cmd_x;
        memdev0_SdramCntl0_sAddr_r <= memdev0_SdramCntl0_sAddr_x;
        memdev0_SdramCntl0_sData_r <= memdev0_SdramCntl0_sData_x;
        memdev0_SdramCntl0_sDataDir_r <= memdev0_SdramCntl0_sDataDir_x;
        memdev0_SdramCntl0_activeBank_r <= memdev0_SdramCntl0_activeBank_x;
        memdev0_SdramCntl0_sdramData_r <= memdev0_SdramCntl0_sdramData_x;
        memdev0_SdramCntl0_wrPipeline_r <= memdev0_SdramCntl0_wrPipeline_x;
        memdev0_SdramCntl0_rdPipeline_r <= memdev0_SdramCntl0_rdPipeline_x;
        memdev0_SdramCntl0_ba_r <= memdev0_SdramCntl0_ba_x;
        memdev0_SdramCntl0_timer_r <= memdev0_SdramCntl0_timer_x;
        memdev0_SdramCntl0_rasTimer_r <= memdev0_SdramCntl0_rasTimer_x;
        memdev0_SdramCntl0_refTimer_r <= memdev0_SdramCntl0_refTimer_x;
        memdev0_SdramCntl0_wrTimer_r <= memdev0_SdramCntl0_wrTimer_x;
        memdev0_SdramCntl0_rfshCntr_r <= memdev0_SdramCntl0_rfshCntr_x;
        for (index=0; index<(2 ** 2); index=index+1) begin
            memdev0_SdramCntl0_activeRow_r[index] <= memdev0_SdramCntl0_activeRow_x[index];
            memdev0_SdramCntl0_activeFlag_r[index] <= memdev0_SdramCntl0_activeFlag_x[index];
        end
    end
end


always @(memdev0_SdramCntl0_cmd_r, memdev0_SdramCntl0_sData_r, memdev0_SdramCntl0_sAddr_r, memdev0_SdramCntl0_bank_s, memdev0_SdramCntl0_sDataDir_r) begin: TOP_MEMDEV0_SDRAMCNTL0_SDRAM_PIN_MAP
    memdev0_SdramCntl0_sd_intf_cke = 1;
    memdev0_SdramCntl0_sd_intf_cs = 0;
    memdev0_SdramCntl0_sd_intf_ras = memdev0_SdramCntl0_cmd_r[2];
    memdev0_SdramCntl0_sd_intf_cas = memdev0_SdramCntl0_cmd_r[1];
    memdev0_SdramCntl0_sd_intf_we = memdev0_SdramCntl0_cmd_r[0];
    memdev0_SdramCntl0_sd_intf_bs = memdev0_SdramCntl0_bank_s;
    memdev0_SdramCntl0_sd_intf_addr = memdev0_SdramCntl0_sAddr_r;
    if ((memdev0_SdramCntl0_sDataDir_r == 1'b1)) begin
        memdev0_SdramCntl0_sDriver = memdev0_SdramCntl0_sData_r;
    end
    else begin
        memdev0_SdramCntl0_sDriver = 'bz;
    end
    memdev0_SdramCntl0_sd_intf_dqml = 0;
    memdev0_SdramCntl0_sd_intf_dqmh = 0;
end



assign memdev0_SdramCntl0_host_intf_done_o = (memdev0_SdramCntl0_rdPipeline_r[0] || memdev0_SdramCntl0_wrPipeline_r[0]);
assign memdev0_SdramCntl0_host_intf_data_o = memdev0_SdramCntl0_sdramData_r;
assign memdev0_SdramCntl0_host_intf_rdPending_o = memdev0_SdramCntl0_rdInProgress_s;
assign memdev0_SdramCntl0_sData_x = memdev0_SdramCntl0_host_intf_data_i;



assign memdev0_SdramCntl0_bank_s = memdev0_SdramCntl0_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign memdev0_SdramCntl0_ba_x = memdev0_SdramCntl0_host_intf_addr_i[((2 + 13) + 9)-1:(13 + 9)];
assign memdev0_SdramCntl0_row_s = memdev0_SdramCntl0_host_intf_addr_i[(13 + 9)-1:9];
assign memdev0_SdramCntl0_col_s = memdev0_SdramCntl0_host_intf_addr_i[9-1:0];


always @(memdev0_SdramCntl0_activeRow_r[0], memdev0_SdramCntl0_activeRow_r[1], memdev0_SdramCntl0_activeRow_r[2], memdev0_SdramCntl0_activeRow_r[3], memdev0_SdramCntl0_rdPipeline_r, memdev0_SdramCntl0_bank_s, memdev0_SdramCntl0_sdramData_r, memdev0_SdramCntl0_activeBank_r, memdev0_SdramCntl0_wrTimer_r, memdev0_SdramCntl0_sd_intf_dq, memdev0_SdramCntl0_row_s, memdev0_SdramCntl0_rasTimer_r, memdev0_SdramCntl0_activeFlag_r[0], memdev0_SdramCntl0_activeFlag_r[1], memdev0_SdramCntl0_activeFlag_r[2], memdev0_SdramCntl0_activeFlag_r[3]) begin: TOP_MEMDEV0_SDRAMCNTL0_DO_ACTIVE
    if (((memdev0_SdramCntl0_bank_s != memdev0_SdramCntl0_activeBank_r) || (memdev0_SdramCntl0_row_s != memdev0_SdramCntl0_activeRow_r[memdev0_SdramCntl0_bank_s]) || (memdev0_SdramCntl0_activeFlag_r[memdev0_SdramCntl0_bank_s] == 1'b0))) begin
        memdev0_SdramCntl0_doActivate_s = 1'b1;
    end
    else begin
        memdev0_SdramCntl0_doActivate_s = 1'b0;
    end
    if ((memdev0_SdramCntl0_rdPipeline_r[1] == 1'b1)) begin
        memdev0_SdramCntl0_sdramData_x = memdev0_SdramCntl0_sd_intf_dq;
    end
    else begin
        memdev0_SdramCntl0_sdramData_x = memdev0_SdramCntl0_sdramData_r;
    end
    if ((memdev0_SdramCntl0_rasTimer_r != 0)) begin
        memdev0_SdramCntl0_activateInProgress_s = 1'b1;
    end
    else begin
        memdev0_SdramCntl0_activateInProgress_s = 1'b0;
    end
    if ((memdev0_SdramCntl0_wrTimer_r != 0)) begin
        memdev0_SdramCntl0_writeInProgress_s = 1'b1;
    end
    else begin
        memdev0_SdramCntl0_writeInProgress_s = 1'b0;
    end
    if ((memdev0_SdramCntl0_rdPipeline_r[(3 + 2)-1:1] != 0)) begin
        memdev0_SdramCntl0_rdInProgress_s = 1'b1;
    end
    else begin
        memdev0_SdramCntl0_rdInProgress_s = 1'b0;
    end
end



assign memdev0_memory_test0_rand_val = memdev0_memory_test0_uniform_rand_gen0_shfreg;


always @(posedge memdev0_clk) begin: TOP_MEMDEV0_MEMORY_TEST0_UNIFORM_RAND_GEN0_RAND_SHIFT
    integer i;
    integer xor_bit;
    integer bits;
    bits = (memdev0_memory_test0_uniform_rand_gen0_shfreg & 53256);
    xor_bit = 0;
    for (i=0; i<16; i=i+1) begin
        xor_bit = (xor_bit ^ bits[i]);
    end
    if (memdev0_memory_test0_rand_load) begin
        memdev0_memory_test0_uniform_rand_gen0_shfreg <= 42;
    end
    else if (memdev0_memory_test0_rand_enable) begin
        memdev0_memory_test0_uniform_rand_gen0_shfreg[16-1:1] <= memdev0_memory_test0_uniform_rand_gen0_shfreg[(16 - 1)-1:0];
        memdev0_memory_test0_uniform_rand_gen0_shfreg[0] <= xor_bit;
    end
end


always @(posedge memdev0_clk) begin: TOP_MEMDEV0_MEMORY_TEST0_SDRAM_TESTER
    if ((memdev0_reset == 1'b1)) begin
        memdev0_memory_test0_error <= 1'b0;
        memdev0_memory_test0_test_state <= 2'b01;
        memdev0_memory_test0_status_o <= 49;
        led_status <= 4'h1;
        memdev0_memory_test0_address <= 0;
        memdev0_memory_test0_rand_load <= 1;
    end
    else if ((memdev0_memory_test0_test_state == 2'b01)) begin
        memdev0_memory_test0_rand_load <= 0;
        memdev0_memory_test0_rand_enable <= 0;
        memdev0_memory_test0_status_o <= 50;
        led_status <= 4'h2;
        if ((memdev0_SdramCntl0_host_intf_done_o == 1'b0)) begin
            memdev0_memory_test0_wr_enable <= 1'b1;
        end
        else begin
            memdev0_memory_test0_wr_enable <= 1'b0;
            memdev0_memory_test0_rand_enable <= 1;
            memdev0_memory_test0_address <= (memdev0_memory_test0_address + 1);
            if ((memdev0_memory_test0_address == 16777215)) begin
                memdev0_memory_test0_test_state <= 2'b10;
                memdev0_memory_test0_address <= 0;
                memdev0_memory_test0_rand_load <= 1;
                memdev0_memory_test0_error <= 1'b0;
            end
        end
    end
    else if ((memdev0_memory_test0_test_state == 2'b10)) begin
        memdev0_memory_test0_rand_load <= 0;
        memdev0_memory_test0_rand_enable <= 0;
        memdev0_memory_test0_status_o <= 51;
        led_status <= 4'h4;
        if ((memdev0_SdramCntl0_host_intf_done_o == 1'b0)) begin
            memdev0_memory_test0_rd_enable <= 1'b1;
        end
        else begin
            memdev0_memory_test0_rd_enable <= 1'b0;
            memdev0_memory_test0_rand_enable <= 1;
            memdev0_memory_test0_address <= (memdev0_memory_test0_address + 1);
            if ((memdev0_memory_test0_rand_val != memdev0_SdramCntl0_host_intf_data_o)) begin
                memdev0_memory_test0_error <= 1'b1;
            end
            if ((memdev0_memory_test0_address == 16777215)) begin
                memdev0_memory_test0_test_state <= 2'b11;
            end
        end
    end
    else begin
        memdev0_memory_test0_rand_load <= 0;
        memdev0_memory_test0_rand_enable <= 0;
        if ((memdev0_memory_test0_error == 1'b1)) begin
            memdev0_memory_test0_status_o <= 70;
        end
        else begin
            memdev0_memory_test0_status_o <= 79;
            led_status <= 4'hf;
        end
    end
end



assign memdev0_memory_test0_host_intf_rst_i = memdev0_reset;
assign memdev0_SdramCntl0_host_intf_wr_i = (memdev0_memory_test0_wr_enable && (!memdev0_SdramCntl0_host_intf_done_o));
assign memdev0_SdramCntl0_host_intf_rd_i = (memdev0_memory_test0_rd_enable && (!memdev0_SdramCntl0_host_intf_done_o));
assign memdev0_SdramCntl0_host_intf_data_i = memdev0_memory_test0_rand_val;
assign memdev0_SdramCntl0_host_intf_addr_i = memdev0_memory_test0_address;


always @(posedge clk100MHz) begin: TOP_DIVCLKBY20_0_DIV2
    clk50MHz <= (!clk50MHz);
end

endmodule
